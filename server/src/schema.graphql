type GetChatResponse {
  ok: Boolean!
  error: String
  chat: Chat
}

type Query {
  GetChat(chatId: Int!): GetChatResponse!
  GetMyPlaces: GetMyPlacesResponse!
  GetMyProfile: GetMyProfileResponse!
  GetNearbyDrivers: GetNearbyDriversResponse!
  user: User
}

type Subscription {
  MessageSubscription: Message
}

type SendChatMessageResponse {
  ok: Boolean!
  error: String
  message: Message
}

type Mutation {
  SendChatMessage(text: String!, chatId: Int!): SendChatMessageResponse!
  AddPlace(name: String!, lat: Float!, lng: Float!, address: String!, isFav: Boolean!): AddPlaceResponse!
  DeletePlace(placeId: Int!): DeletePlaceResponse!
  EditPlace(placeId: Int!, name: String, isFav: Boolean): EditPlaceResponse!
  CompleteEmailVerification(key: String!): CompleteEmailVerificationResponse!
  CompletePhoneVerification(phoneNumber: String!, key: String!): CompletePhoneVerificationResponse!
  EmailSignIn(email: String!, password: String!): EmailSignInResponse!
  EmailSignUp(firstName: String!, lastName: String!, email: String!, password: String!, profilePhoto: String!, age: Int!, phoneNumber: String!): EmailSignUpResponse!
  FacebookConnect(data: FacebookConnectInput): FacebookConnectResponse!
  RequestEmailVerification: RequestEmailVerificationResponse!
  StartPhoneVerification(phoneNumber: String!): StartPhoneVerificationResponse!
}

type Chat {
  id: ID!
  messages: [Message]
  passengerId: Int!
  passenger: User!
  driverId: Int
  driver: User!
  rideId: Int
  ride: Ride!
  createdAt: String!
  updatedAt: String!
}

# import '../../user/user'
type Message {
  id: ID!
  text: String!
  chat: Chat!
  user: User!
  createdAt: String!
  updatedAt: String!
}

type AddPlaceResponse {
  ok: Boolean!
  error: String
}

type DeletePlaceResponse {
  ok: Boolean!
  error: String
}

type EditPlaceResponse {
  ok: Boolean!
  error: String
}

type GetMyPlacesResponse {
  ok: Boolean!
  error: String
  places: [Place]
}

type Place {
  id: ID!
  name: String!
  lat: Float!
  lng: Float!
  address: String!
  isFav: Boolean!
  userId: Int!
  user: User!
  createdAt: String!
  updatedAt: String!
}

enum StatusState {
  ACCEPTED
  FINISHED
  CANCELED
  REQUESTING
  ONROUTE
}

type Ride {
  id: ID!
  status: StatusState!
  pickUpAddress: String!
  pickUpLat: Float!
  pickUpLng: Float!
  dropOffAddress: String!
  dropOffLat: Float!
  dropOffLng: Float!
  price: Float!
  distance: String!
  duration: String!
  driverId: Int
  driver: User!
  passengerId: Int!
  passenger: User!
  chat: Chat
  chatId: Int
  createdAt: String!
  updatedAt: String!
}

type CompleteEmailVerificationResponse {
  ok: Boolean!
  error: String
}

type CompletePhoneVerificationResponse {
  ok: Boolean!
  error: String
  token: String
}

type EmailSignInResponse {
  ok: Boolean!
  error: String
  token: String
}

type EmailSignUpResponse {
  ok: Boolean!
  error: String
  token: String
}

# //type response
type FacebookConnectResponse {
  ok: Boolean!
  error: String
  token: String
}

# unput data
input FacebookConnectInput {
  firstName: String!
  lastName: String!
  email: String! @unique
  fbId: String!
}

type GetMyProfileResponse {
  ok: Boolean!
  error: String
  user: User
}

type GetNearbyDriversResponse {
  ok: Boolean!
  error: String
  drivers: [User]
}

type RequestEmailVerificationResponse {
  ok: Boolean!
  error: String
}

type User {
  id: ID!
  email: String! @unique
  verifiedEmail: Boolean!
  firstName: String!
  lastName: String!
  age: Int
  password: String
  phoneNumber: String
  verifiedPhoneNumber: Boolean!
  profilePhoto: String
  fullName: String
  isDriving: Boolean!
  isRiding: Boolean!
  isTaken: Boolean!
  lastLng: Float
  lastLat: Float
  lastOrientation: Float
  fbId: String
  messages: [Message]
  ridesAsPassenger: [Ride]
  ridesAsDriver: [Ride]
  chatsAsDriver: [Chat]
  chatsAsPassenger: [Chat]
  places: [Place]
  createdAt: String!
  updatedAt: String!
}

type StartPhoneVerificationResponse {
  ok: Boolean!
  error: String
}

enum Target {
  email
  phone
}

# PAYLOAD LIKE MESSAGR FOR VERIVACATION LIKE 44545
type Verification {
  id: ID!
  target: Target!
  payload: String!
  key: String!
  verified: Boolean!
  createdAt: String!
  updatedAt: String!
}
